#lang racket

(define (fill-vector v i)
    (define (iter v)
        (printf "enter number: ")
        (vector-set! v i (string->number (read-line)))
        (fill-vector v (+ i 1)))
    (if (<= i (- (vector-length v) 1)) 
        (iter v)
        v))

(define (get-biggest-i vec next-i biggest-at-i except-i)
    (define (compare-and-iter n-i b-i)
        (if (and (not (= n-i except-i)) 
                 (> (vector-ref vec n-i) (vector-ref vec b-i)))
            (get-biggest-i vec (+ n-i 1) n-i except-i)
            (get-biggest-i vec (+ n-i 1) b-i except-i)))
    (if (= next-i (vector-length vec)) biggest-at-i 
        (compare-and-iter next-i biggest-at-i)))

(define (max-pairwise-product vec)
    (define first-max-index (get-biggest-i vec 0 0 -1))
    ;(printf (number->string (vector-ref vec first-max-index)))
    (printf (number->string first-max-index))
    (printf " * ")
    (define second-max-index (get-biggest-i vec 0 0 first-max-index))
    ;(printf (number->string (vector-ref vec second-max-index)))
    (printf (number->string second-max-index))
    (printf " = ")
    (* (vector-ref vec first-max-index) (vector-ref vec second-max-index)))

(printf "Enter vector length: ")
(define vec-len (read-line))
(define vec (make-vector (string->number vec-len)))
(fill-vector vec 0)
(max-pairwise-product vec)
